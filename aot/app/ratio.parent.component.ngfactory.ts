/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../app/ratio.parent.component';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/render/api';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/metadata/view';
import * as import5 from '@angular/core/src/linker/view_type';
import * as import6 from '@angular/core/src/change_detection/change_detection';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '../../app/ratio.component';
import * as import9 from './ratio.component.ngfactory';
export class Wrapper_RatioParentComponent {
  /*private*/ _eventHandler:Function;
  context:import0.RatioParentComponent;
  /*private*/ _changed:boolean;
  constructor() {
    this._changed = false;
    this.context = new import0.RatioParentComponent();
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_RatioParentComponent_Host:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,([] as any[]),{});
class View_RatioParentComponent_Host0 extends import1.AppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.RatioParentComponent>;
  _RatioParentComponent_0_3:Wrapper_RatioParentComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_RatioParentComponent_Host0,renderType_RatioParentComponent_Host,import5.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'ratio-cell',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_RatioParentComponent0(this.viewUtils,this,0,this._el_0);
    this._RatioParentComponent_0_3 = new Wrapper_RatioParentComponent();
    this.compView_0.create(this._RatioParentComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._RatioParentComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.RatioParentComponent) && (0 === requestNodeIndex))) { return this._RatioParentComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._RatioParentComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const RatioParentComponentNgFactory:import7.ComponentFactory<import0.RatioParentComponent> = new import7.ComponentFactory<import0.RatioParentComponent>('ratio-cell',View_RatioParentComponent_Host0,import0.RatioParentComponent);
const styles_RatioParentComponent:any[] = ['ag-ratio[_ngcontent-%COMP%] {\n          display: block;\n          overflow:hidden;\n          border:1px solid #ccc;\n          border-radius:6px;\n          background: #fff;\n        }'];
var renderType_RatioParentComponent:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.Emulated,styles_RatioParentComponent,{});
export class View_RatioParentComponent0 extends import1.AppView<import0.RatioParentComponent> {
  _text_0:any;
  _el_1:any;
  compView_1:import1.AppView<import8.RatioComponent>;
  _RatioComponent_1_3:import9.Wrapper_RatioComponent;
  _text_2:any;
  _text_3:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_RatioParentComponent0,renderType_RatioParentComponent,import5.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'ag-ratio',new import3.InlineArray2(2,'style','height:20px'),(null as any));
    this.compView_1 = new import9.View_RatioComponent0(this.viewUtils,this,1,this._el_1);
    this._RatioComponent_1_3 = new import9.Wrapper_RatioComponent();
    this._text_2 = this.renderer.createText((null as any),'\n    ',(null as any));
    this.compView_1.create(this._RatioComponent_1_3.context);
    this._text_3 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._text_3
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import8.RatioComponent) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 2)))) { return this._RatioComponent_1_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = ((this.context.params == null)? (null as any): ((this.context.params.value == null)? (null as any): this.context.params.value.top));
    this._RatioComponent_1_3.check_topRatio(currVal_1_0_0,throwOnChange,false);
    const currVal_1_0_1:any = ((this.context.params == null)? (null as any): ((this.context.params.value == null)? (null as any): this.context.params.value.bottom));
    this._RatioComponent_1_3.check_bottomRatio(currVal_1_0_1,throwOnChange,false);
    this._RatioComponent_1_3.ngDoCheck(this,this._el_1,throwOnChange);
    this.compView_1.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_1.destroy();
  }
}